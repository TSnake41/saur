diff -Naur orig.noVNC-1.5.0/app/ui.js new.noVNC-1.5.0/app/ui.js
--- orig.noVNC-1.5.0/app/ui.js	2024-10-01 12:39:37.551687633 -0700
+++ new.noVNC-1.5.0/app/ui.js	2024-10-01 12:46:20.490818300 -0700
@@ -17,6 +17,8 @@
 import Keyboard from "../core/input/keyboard.js";
 import RFB from "../core/rfb.js";
 import * as WebUtil from "./webutil.js";
+import { local_settings } from "../settings.js";
+
 
 const PAGE_TITLE = "noVNC";
 
@@ -62,12 +64,9 @@
         // Translate the DOM
         l10n.translateDOM();
 
-        // We rely on modern APIs which might not be available in an
-        // insecure context
-        if (!window.isSecureContext) {
-            // FIXME: This gets hidden when connecting
-            UI.showStatus(_("Running without HTTPS is not recommended, crashes or other issues are likely."), 'error');
-        }
+		// In our installation this is usually sitting behind a proxy or VPN
+		// secure check removed
+
 
         // Try to fetch version number
         fetch('./package.json')
@@ -120,7 +119,8 @@
 
         document.documentElement.classList.remove("noVNC_loading");
 
-        let autoconnect = WebUtil.getConfigVar('autoconnect', false);
+        let autoconnect = local_settings.autoconnect;
+
         if (autoconnect === 'true' || autoconnect == '1') {
             autoconnect = true;
             UI.connect();
@@ -154,36 +154,26 @@
             UI.addOption(document.getElementById('noVNC_setting_logging'), llevels[i], llevels[i]);
         }
 
+
         // Settings with immediate effects
         UI.initSetting('logging', 'warn');
         UI.updateLogging();
 
-        // if port == 80 (or 443) then it won't be present and should be
-        // set manually
-        let port = window.location.port;
-        if (!port) {
-            if (window.location.protocol.substring(0, 5) == 'https') {
-                port = 443;
-            } else if (window.location.protocol.substring(0, 4) == 'http') {
-                port = 80;
-            }
-        }
-
         /* Populate the controls if defaults are provided in the URL */
-        UI.initSetting('host', window.location.hostname);
-        UI.initSetting('port', port);
-        UI.initSetting('encrypt', (window.location.protocol === "https:"));
-        UI.initSetting('view_clip', false);
-        UI.initSetting('resize', 'off');
-        UI.initSetting('quality', 6);
-        UI.initSetting('compression', 2);
-        UI.initSetting('shared', true);
-        UI.initSetting('view_only', false);
-        UI.initSetting('show_dot', false);
-        UI.initSetting('path', 'websockify');
-        UI.initSetting('repeaterID', '');
-        UI.initSetting('reconnect', false);
-        UI.initSetting('reconnect_delay', 5000);
+        UI.initSetting('host',            local_settings.host);
+        UI.initSetting('port',            local_settings.port);
+        UI.initSetting('encrypt',         local_settings.encrypt);
+        UI.initSetting('view_clip',       local_settings.view_clip);
+        UI.initSetting('resize',          local_settings.resize);
+        UI.initSetting('quality',         local_settings.quality);
+        UI.initSetting('compression',     local_settings.compression);
+        UI.initSetting('shared',          local_settings.shared);
+        UI.initSetting('view_only',       local_settings.view_only);
+        UI.initSetting('show_dot',        local_settings.show_dot);
+        UI.initSetting('path',            local_settings.path);
+        UI.initSetting('repeaterID',      local_settings.repeaterID);
+        UI.initSetting('reconnect',       local_settings.reconnect);
+        UI.initSetting('reconnect_delay', local_settings.reconnect_delay);
 
         UI.setupSettingLabels();
     },
@@ -748,10 +738,7 @@
     // Initial page load read/initialization of settings
     initSetting(name, defVal) {
         // Check Query string followed by cookie
-        let val = WebUtil.getConfigVar(name);
-        if (val === null) {
-            val = WebUtil.readSetting(name, defVal);
-        }
+        let val = WebUtil.readSetting(name, defVal);
         WebUtil.setSetting(name, val);
         UI.updateSetting(name);
         return val;
